type ENV = {
	game: DataModel,
	getmetatable: (t: table) -> table?,
	error: (message: any, level: number?) -> (),
	debug: {
		info: 
			((thread: thread, level: number, options: string) -> ...any)
			& ((functionOrLevel: function | number, options: string) -> ...any),
		traceback: 
			((level: number?) -> string) 
			& ((message: string, level: number?) -> string)
			& ((thread: thread, message: string, level: number?) -> string),
		profilebegin: (label: string) -> (),
		profileend: () -> (),
		setmemorycategory: (tag: string) -> (),
		resetmemorycategory: () -> (),

		-- RENC
		getupvalue: (fn: function | number, index: number) -> any,
		getupvalues: (fn: function | number) -> { [number]: any },
		setupvalue: (fn: function | number, index: number, value: any) -> string?,
		getconstant: (fn: function | number, index: number) -> any,
		getconstants: (fn: function | number) -> { [number]: any },
		setconstant: (fn: function | number, index: number, value: any) -> (),
		getproto: (fn: function | number, index: number, list: boolean?) -> function | {[number]: function},
		getprotos: (fn: function | number) -> { [number]: function },
		setstack: (fn: number, index: number, value: any) -> (),
		getstack: (fn: number, index: number?) -> { [number]: any } | any,
		getinfo: (fn: function | number) -> RENCFunctionInfo,
		getregistry: () -> { [userdata | string | number]: any },
	},
	task: {
		defer: (f: function | thread, ...any) -> any,
		desynchronize: () -> (),
		spawn: (f: function | thread, ...any) -> any,
		synchronize: () -> (),
		delay: (sec: number?, f: function | thread, ...any) -> any,
		wait: (sec: number?) -> number,
	},
	tonumber: (value: any, radix: number?) -> number,
	pcall: (f: function, ...any) -> (boolean, ...any),
	Enum: Enums,
	collectgarbage: (mode: string) -> number,
	utf8: {
		char: (code: number, ...number) -> string,
		charpattern: string,
		codes: (s: string) -> function,
		codepoint: (s: string, i: number?, j: number?) -> (number, ...number),
		len: (s: string, i: number?, j: number?) -> (number?, number?),
		offset: (s: string, n: number?, i: number?) -> number,
		graphemes: (str: string, i: number?, j: number?) -> function,
		nfcnormalize: (str: string) -> string,
		nfdnormalize: (str: string) -> string,
	},
	getfenv: (target: any?) -> { [string]: any },
	plugin: Plugin,
	pairs: (t: table) -> ((table, any?) -> (any, any), table, nil),
	gcinfo: () -> number,
	ypcall: (f: function, ...any) -> (boolean, ...any),
	xpcall: (f: function, err: function, ...any) -> (boolean, ...any),
	workspace: Workspace,
	_VERSION: string,
	string: {
		pack: (fmt: string, ...any) -> string,
		packsize: (fmt: string) -> number,
		rep: (s: string, n: number) -> string,
		reverse: (s: string) -> string,
		sub: (s: string, i: number, j: number?) -> string,
		unpack: (fmt: string, s: string, pos: number?) -> ...any,
		upper: (s: string) -> string,
		split: (s: string, separator: string?) -> { string },
		byte: (s: string, i: number?, j: number?) -> ...number,
		char: (byte: number, ...number) -> string,
		find: (s: string, pattern: string, init: number?, plain: boolean?) -> (number?, number?),
		format: (s: string, ...any) -> string,
		gmatch: (s: string, pattern: string) -> () -> ...string,
		gsub: (
			s: string,
			pattern: string,
			repl: string | { [string]: string } | ((string) -> string),
			n: number?
		) -> (string, number),
		len: (s: string) -> number,
		lower: (s: string) -> string,
		match: (s: string, pattern: string, init: number?) -> string?,
	},
	warn: (...any) -> (),
	UserSettings: () -> UserSettings,
	tostring: (value: any) -> string,
	wait: (seconds: number?) -> (number, number),
	unpack: (list: table, i: number?, j: number?) -> ...any,
	tick: () -> number,
	newproxy: (addmt: boolean) -> any,
	time: () -> number,
	elapsedTime: () -> number,
	table: {
		maxn: (t: table) -> number,
		find: (t: table, value: any, init: number?) -> number?,
		foreach: (t: table, f: (any, any) -> ()) -> (),
		foreachi: (t: table, f: (number, any) -> ()) -> (),
		getn: (t: table) -> number,
		concat: (t: table, sep: string?, i: number?, j: number?) -> string,
		insert: 
			((t: table, value: any) -> ())
			& ((t: table, pos: number, value: any) -> ()),
		move: (a1: table, f: number, e: number, t: number, a2: table?) -> (),
		pack: (...any) -> { n: number, [number]: any },
		remove: (t: table, pos: number?) -> any?,
		sort: (t: table, comp: ((any, any) -> boolean)?) -> (),
		unpack: (t: table, i: number?, j: number?) -> ...any,
		clear: (t: table) -> (),
		create: (count: number, value: any?) -> table,
		freeze: (t: table) -> table,
		isfrozen: (t: table) -> boolean
	},
	setfenv: (target: function | number, env: { [string]: any }) -> function?,
	os: {
		clock: () -> number,
		date: (format: string?, time: number?) -> string | DateTypeResult,
		difftime: (t2: number | DateTypeResult, t1: number | DateTypeResult) -> number,
		time: (t: DateTypeArg?) -> number,
	},
	type: (value: any) -> string,
	ipairs: (t: table) -> ((table, number) -> (number, any), table, number),
	coroutine: {
		create: (f: function) -> thread,
		isyieldable: () -> boolean,
		resume: (co: thread, ...any) -> (boolean, ...any),
		running: () -> thread,
		status: (co: thread) -> string,
		wrap: (f: function) -> function,
		yield: (...any) -> ...any,
	},
	shared: any,
	typeof: (value: any) -> string,
	spawn: (callback: function) -> (),
	_G: table,
	settings: () -> GlobalSettings,
	require: (module: any) -> any,
	bit32: {
		lshift: (x: number, disp: number) -> number,
		rrotate: (x: number, disp: number) -> number,
		rshift: (x: number, disp: number) -> number,
		arshift: (x: number, disp: number) -> number,
		band: (...number) -> number,
		bnot: (x: number) -> number,
		bor: (...number) -> number,
		btest: (x: number, ...number) -> boolean,
		bxor: (...number) -> number,
		extract: (n: number, field: number, width: number?) -> number,
		replace: (n: number, v: number, field: number, width: number?) -> number,
		lrotate: (x: number, disp: number) -> number,
	},
	select: (index: string | number, ...any) -> any,
	setmetatable: (table: table, metatable: table | nil) -> table,
	rawset: (table: table, index: any, value: any) -> table,
	rawget: (table: table, index: any) -> any,
	rawequal: (v1: any, v2: any) -> boolean,
	print: (...any) -> (),
	math: {
		exp: (x: number) -> number,
		floor: (x: number) -> number,
		fmod: (x: number, y: number) -> number,
		frexp: (x: number) -> (number, number),
		huge: number,
		ldexp: (m: number, e: number) -> number,
		log: (x: number, base: number?) -> number,
		log10: (x: number) -> number,
		max: (x: number, ...any) -> number,
		min: (x: number, ...any) -> number,
		abs: (x: number) -> number,
		modf: (x: number) -> (number, number),
		pi: number,
		pow: (x: number, y: number) -> number,
		rad: (x: number) -> number,
		random: (m: number?, n: number?) -> number,
		randomseed: (x: number) -> (),
		sin: (x: number) -> number,
		sinh: (x: number) -> number,
		sqrt: (x: number) -> number,
		tan: (x: number) -> number,
		acos: (x: number) -> number,
		tanh: (x: number) -> number,
		clamp: (n: number, min: number, max: number) -> number,
		noise: (x: number, y: number, z: number) -> number,
		sign: (x: number) -> number,
		round: (x: number) -> number,
		asin: (x: number) -> number,
		atan: (y: number) -> number,
		atan2: (y: number, x: number) -> number,
		ceil: (x: number) -> number,
		cos: (x: number) -> number,
		cosh: (x: number) -> number,
		deg: (x: number) -> number,
	},
	next: (t: table, lastKey: any?) -> (any, any),
	loadstring: (src: string, chunkname: string?) -> (function?, string?),
	delay: (delayTime: number?, callback: function) -> (),
	script: LuaSourceContainer,
	assert: (value: any, errorMessage: string?) -> any,

	-- Closure
	hookfunction: (fn: function, hook: function) -> function,
	isexecutorclosure: (fn: function) -> boolean,
	iscclosure: (fn: function) -> boolean,
	islclosure: (fn: function) -> boolean,
	newcclosure: (fn: function) -> function,

	-- Input
	keypress: (keyCode: KeyCode) -> (),
	keyrelease: (keyCode: KeyCode) -> (),
	mouse1click: () -> (),
	mouse1down: () -> (),
	mouse1up: () -> (),
	mouse2click: () -> (),
	mouse2down: () -> (),
	mouse2up: () -> (),
	isrbxactive: () -> boolean,
	mousemoverel: (deltaX: number, deltaY: number) -> (),
	mousemoveabs: (X: number, Y: number) -> (),
	mousescroll: (distance: number) -> (),

	-- Instances
	setscriptable: (instance: Instance, property: string, scriptable: boolean) -> (),
	gethiddenproperty: (instance: Instance, property: string) -> any,
	getproperties: (instance: Instance) -> { [string]: any },
	setsimulationradius: (radius: number) -> (),
	sethiddenproperty: (instance: Instance, property: string, value: any) -> (),
	getspecialinfo: (instance: Instance) -> { [string]: any },
	fireclickdetector: (clickDetector: ClickDetector, distance: number?) -> (),
	firetouchinterest: (part: Instance, touched: boolean?) -> (),
	fireproximityprompt: (prompt: ProximityPrompt, triggered: boolean?, hold: boolean?) -> (),
	firesignal: (object: Instance, signal: string?, args: any?) -> (),
	getconnections: (signal: RBXScriptSignal) -> { [number]: Connection },
	getinstances: () -> { [number]: Instance },
	getnilinstances: () -> { [number]: Instance },
	getcallbackvalue: (instance: Instance, property: string) -> function?,
	getcallbackmember: (instance: Instance, property: string) -> function?,
	getplayer: (name: string?) -> Instance,
	getplayers: () -> { [string]: Instance },
	runanimation: (animationId, player: Instance?) -> ()

	-- Script
	getscriptclosure: (script: LocalScript | ModuleScript) -> function,
	decompile: (script: LocalScript | ModuleScript) -> string,
	getcallingscript: () -> LocalScript | ModuleScript | nil,
	getsenv: (script: LocalScript | ModuleScript) -> { [any]: any },
	getloadedmodules: () -> { [number]: ModuleScript },
	getscripts: () -> { [number]: LocalScript | ModuleScript },
	getscriptbytecode: (script: LocalScript | ModuleScript) -> string,
	getscripthash: (script: LocalScript | ModuleScript) -> string,

	-- Console
	rconsolename: (name: string) -> (),
	rconsoleprint: (data: string) -> (),
	rconsoleinfo: (data: string) -> (),
	rconsolewarn: (data: string) -> (),
	rconsoleerr: (data: string) -> (),
	rconsoleclose: () -> (),
	rconsoleclear: () -> (),
	rconsoleinput: () -> string,
	messagebox: (text: string, caption: string, flags: number) -> MessageBoxResult,

	-- File system
	isfolder: (path: string) -> boolean,
	isfile: (path: string) -> boolean,
	makefolder: (path: string) -> (),
	delfile: (path: string) -> (),
	delfolder: (path: string) -> (),
	listfiles: (path: string) -> { [number]: string },
	readfile: (path: string) -> string,
	writefile: (path: string, data: string) -> (),
	appendfile: (path: string, data: string) -> (),

	-- Network
	getnetworkmode: () -> number,
	setnetworkmode: (mode: number) -> (),
	request: (requestOptions: RequestOptions) -> Response,

	-- Metatable
	getrawmetatable: (object: any) -> table?,
	setrawmetatable: (object: any, metatable: table) -> (),
	setreadonly: (table: table, readonly: boolean) -> (),
	isreadonly: (table: table) -> boolean,
	getnamecallmethod: () -> string?,
	setnamecallmethod: (method: string) -> (),

	-- Misc
	checkcaller: () -> boolean,
	setfflag: (fflag: string, value: string | number | boolean) -> boolean,
	getthreadcontext: (number) -> number,
	setthreadcontext: (identity: number) -> (),
	queue_on_teleport: (source: string) -> (),
	gethui: () -> Folder,
	getgenv: () -> { [any]: any },
	getrenv: () -> { [any]: any },
	getreg: () -> { [any]: any },
	setclipboard: (data: string) -> (),
	getgc: (includeTables: boolean?) -> { [number]: function | table },
	getcustomasset: (assetPath: string) -> string,
	setfpscap: (fpsCap: number) -> (),

	Drawing: {
		new: (drawingType: string) -> Drawing.Line | Drawing.Text | Drawing.Image | Drawing.Circle | Drawing.Square | Drawing.Quad | Drawing.Triangle,
		Clear: () -> (),
		Font: Readonly<{
			UI: Drawing.Font,
			System: Drawing.Font,
			Plex: Drawing.Font,
			Monospace: Drawing.Font,
		}>,
	},

	RENC: {
		Base64: {
			Encode: (data: string) -> string,
			Decode: (data: string) -> string,
		},
		crypt: {
			hash: (data: string) -> string,
		},
	},
	hookmetamethod: (object: any, metamethod: string, hook: function) -> function,
	customprint: (text: string, properties: table, imageId: rbxasset?) -> (),
	getfps: () -> number,
	getping: () -> number,
	getdevice: () -> string,
	join: (PlaceId: number, JobId: string?) -> (),
}

type RENCFunctionInfo = {
	name: string,
	short_src: string,
	what: string,
	currentline: number,
	nups: number,
	func: function,
	source: string,
}

type Connection = {
	Function: (...any) -> void,
	Enable: (self: Connection) -> void,
	Disable: (self: Connection) -> void,
	Fire: (self: Connection, ...any) -> void,
}

type MessageBoxResult = number

type RequestOptions = {
	Url: string,
	Method: string?,
	Headers: { [string]: string }?,
	Body: string?,
}

type Response = {
	Success: boolean,
	StatusCode: number,
	StatusMessage: string?,
	Headers: string?,
	Body: string?,
}

type DateTypeArg = {
	day: number?,
	hour: number?,
	isdst: boolean?,
	min: number?,
	month: number?,
	sec: number?,
	wday: number?,
	yday: number?,
	year: number?,
}

type DateTypeResult = {
	day: number,
	hour: number,
	isdst: boolean,
	min: number,
	month: number,
	sec: number,
	wday: number,
	yday: number,
	year: number,
}
